### 同一文件的变量缓存机制

'''
变量的缓存机制，是为了节省内存空间，提高效率
'''

'''
对于Number类型数据而言
1、对于整形而言，-5 ~ 正无穷范围内的相同值 ID一致
2、对于浮点数而言，非负数范围内的相同值 ID一致
3、对于布尔值而言，值相同的情况下 ID一致
4、复数的 ID标识都不相同（在 实数 + 虚数 这样的结构中）
'''

# int -5 ~ 正无穷
int_var1 = 66
int_var2 = 66
int_var3 = -66
print(id(int_var1),id(int_var2),id(int_var3))
'''
运行结果是：
140721590767296 140721590767296 1535750794288        #可以看出前两个的ID是相同的
'''

# 浮点型   非负数
float_var1 = 6.6
float_var2 = 6.6
float_var3 = -6.6
print(id(float_var1),id(float_var2),id(float_var3))
'''
运行结果是：
2638644669360 2638644669360 2638644668240            #可以看出前两个ID是相同的
'''

# 布尔型   值相同，ID相同
bool_var1 = True
bool_var2 = True
bool_var3 = False
print(id(bool_var1),id(bool_var2),id(bool_var3))
'''
运行结果是：
140721590486864 140721590486864 140721590486896      #可以看出前两个ID是相同的
'''

# 复数
# 实数 + 虚数 这样的结构中 复数都不相同
complex_var1 = 3+4j
complex_var2 = 3+4j
print(id(complex_var1),id(complex_var2))
'''
运行结果是：
2540025177904 2540025177904                          #在3.8版本上ID是一样的，在3.6版本上是不一样的
'''


'''
对于容器类型数据而言
1、对于字符串而言，字符串值相同的情况下，ID一致
2、对于列表、元祖、字典、集合无论什么情况，ID标识都不同（但空元组的ID标识是一样的）
'''


